# -*- cmake -*-

include(FetchContent)
include(CheckLinkerFlag)

###
check_linker_flag(C "-Wl,--no-undefined" CT_HAVE_LINKER_FLAG_NO_UNDEFINED)

###
set(CT_CLAP_FETCH_VERSION "1.0.2")
set(CT_FMT_FETCH_VERSION "8.1.1")

FetchContent_Declare(clap
  GIT_REPOSITORY "https://github.com/free-audio/clap.git"
  GIT_TAG "${CT_CLAP_FETCH_VERSION}")

if(CT_DOWNLOAD_FMT)
  FetchContent_Declare(fmt
    GIT_REPOSITORY "https://github.com/fmtlib/fmt.git"
    GIT_TAG "${CT_FMT_FETCH_VERSION}")
endif()

###
add_library(ct-clap INTERFACE)
if(CT_DOWNLOAD_CLAP)
  message(STATUS "Fetching CLAP: version ${CT_CLAP_FETCH_VERSION}")
  FetchContent_GetProperties(clap)
  if(NOT clap_POPULATED)
    FetchContent_Populate(clap)
  endif()
  message(STATUS "Fetched CLAP headers: ${clap_SOURCE_DIR}/include")
  target_include_directories(ct-clap INTERFACE "${clap_SOURCE_DIR}/include")
elseif(CT_CLAP_INCLUDE_DIR)
  if(NOT EXISTS "${CT_CLAP_INCLUDE_DIR}/clap/clap.h")
    message(FATAL_ERROR "Cannot find clap header \"clap/clap.h\" in the specified directory: ${CT_CLAP_INCLUDE_DIR}")
  endif()
  target_include_directories(ct-clap INTERFACE "${CT_CLAP_INCLUDE_DIR}")
else()
  find_path(CT_CLAP_SYS_INCLUDE_DIR "clap/clap.h")
  if(NOT CT_CLAP_SYS_INCLUDE_DIR)
    message(FATAL_ERROR "Cannot find CLAP headers.")
  endif()
  target_include_directories(ct-clap INTERFACE "${CT_CLAP_SYS_INCLUDE_DIR}")
endif()

###
if(CT_DOWNLOAD_FMT)
  message(STATUS "Fetching fmt: version ${CT_FMT_FETCH_VERSION}")
  FetchContent_GetProperties(fmt)
  if(NOT fmt_POPULATED)
    FetchContent_Populate(fmt)
  endif()
  message(STATUS "Fetched fmt: ${fmt_SOURCE_DIR}")
  #
  add_library(ct-fmt STATIC EXCLUDE_FROM_ALL
    "${fmt_SOURCE_DIR}/src/format.cc"
    "${fmt_SOURCE_DIR}/src/os.cc")
  target_include_directories(ct-fmt PUBLIC
    "${fmt_SOURCE_DIR}/include")
  target_compile_definitions(ct-fmt
    PUBLIC "FMT_NAMESPACE=ct__fmt"
    PRIVATE "fmt=FMT_NAMESPACE")
else()
  add_library(ct-fmt INTERFACE)
  #
  find_package(fmt REQUIRED)
  if(CT_FMT_HEADER_ONLY)
    target_link_libraries(ct-fmt INTERFACE fmt::fmt-header-only)
    target_compile_definitions(ct-fmt INTERFACE "FMT_NAMESPACE=ct__fmt")
  else()
    target_link_libraries(ct-fmt INTERFACE fmt::fmt)
  endif()
endif()

###
add_library(ct-travesty INTERFACE)
target_include_directories(ct-travesty INTERFACE "thirdparty/travesty/include")
